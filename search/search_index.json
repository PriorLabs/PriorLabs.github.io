{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to TabPFN Documentation","text":"<p>TabPFN is a cutting-edge neural network designed specifically for tabular data prediction, leveraging the power of transformers to provide state-of-the-art performance on a wide range of datasets. This documentation will guide you through the installation, basic usage, and advanced features of TabPFN, helping you to efficiently integrate this powerful tool into your data science workflow.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>High Performance: TabPFN brings the power of transformers to tabular data, achieving top-tier results across various datasets.</li> <li>Easy Integration: Designed with an sklearn-like interface, TabPFN can be seamlessly integrated into existing workflows.</li> <li>Versatility: Whether you're working on classification, regression, or even survival analysis tasks, TabPFN has you covered.</li> <li>Efficiency: Optimized for both CPU and GPU, TabPFN ensures fast training and inference times, making it suitable for projects of any scale.</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Getting Started: Learn how to quickly train and evaluate your first TabPFN model.</li> <li>Classification: Dive into using TabPFN for classification tasks, with examples and tips.</li> <li>Regression: Explore how to apply TabPFN to regression problems, including setup and evaluation.</li> </ul>"},{"location":"#getting-help","title":"Getting Help","text":"<p>If you encounter any issues or have questions about using TabPFN, please refer to the FAQs or reach out to the community through GitHub Issues.</p> <p>Thank you for choosing TabPFN. We hope you find this tool valuable in your data science endeavors.</p>"},{"location":"api_reference/","title":"API Reference","text":""},{"location":"api_reference/#tabpfnclassifier","title":"TabPFNClassifier","text":""},{"location":"api_reference/#tabpfn.scripts.transformer_prediction_interface.TabPFNClassifier","title":"TabPFNClassifier","text":"<pre><code>TabPFNClassifier(device='cpu', base_path=pathlib.Path(__file__).parent.parent.resolve(), model_string='', i=0, N_ensemble_configurations=3, combine_preprocessing=False, no_preprocess_mode=False, multiclass_decoder='permutation', feature_shift_decoder=True)\n</code></pre> <p>             Bases: <code>BaseEstimator</code>, <code>ClassifierMixin</code></p> Source code in <code>src/tabpfn/scripts/transformer_prediction_interface.py</code> <pre><code>def __init__(self, device='cpu', base_path=pathlib.Path(__file__).parent.parent.resolve(), model_string='', i=0, N_ensemble_configurations=3\n             , combine_preprocessing=False, no_preprocess_mode=False, multiclass_decoder='permutation', feature_shift_decoder=True):\n    # Model file specification (Model name, Epoch)\n    i, e = i, -1\n\n\n    model, c, results_file = load_model_workflow(i, e, add_name=model_string, base_path=base_path, device=device,\n                                                 eval_addition='')\n    #style, temperature = self.load_result_minimal(style_file, i, e)\n\n    self.device = device\n    self.model = model\n    self.c = c\n    self.style = None\n    self.temperature = None\n    self.N_ensemble_configurations = N_ensemble_configurations\n    self.base__path = base_path\n    self.base_path = base_path\n    self.i = i\n    self.model_string = model_string\n\n    self.max_num_features = self.c['num_features']\n    self.max_num_classes = self.c['max_num_classes']\n    self.differentiable_hps_as_style = self.c['differentiable_hps_as_style']\n\n    self.no_preprocess_mode = no_preprocess_mode\n    self.combine_preprocessing = combine_preprocessing\n    self.feature_shift_decoder = feature_shift_decoder\n    self.multiclass_decoder = multiclass_decoder\n</code></pre>"},{"location":"api_reference/#tabpfn.scripts.transformer_prediction_interface.TabPFNClassifier.fit","title":"fit","text":"<pre><code>fit(X, y, overwrite_warning=False)\n</code></pre> Source code in <code>src/tabpfn/scripts/transformer_prediction_interface.py</code> <pre><code>def fit(self, X, y, overwrite_warning=False):\n    # Check that X and y have correct shape\n    X, y = check_X_y(X, y, force_all_finite=False)\n    # Store the classes seen during fit\n    y = self._validate_targets(y)\n\n    self.X_ = X\n    self.y_ = y\n\n    if X.shape[1] &gt; self.max_num_features:\n        raise ValueError(\"The number of features for this classifier is restricted to \", self.max_num_features)\n    if len(np.unique(y)) &gt; self.max_num_classes:\n        raise ValueError(\"The number of classes for this classifier is restricted to \", self.max_num_classes)\n    if X.shape[0] &gt; 1024 and not overwrite_warning:\n        raise ValueError(\"\u26a0\ufe0f WARNING: TabPFN is not made for datasets with a trainingsize &gt; 1024. Prediction might take a while, be less reliable. We advise not to run datasets &gt; 10k samples, which might lead to your machine crashing (due to quadratic memory scaling of TabPFN). Please confirm you want to run by passing overwrite_warning=True to the fit function.\")\n\n\n    # Return the classifier\n    return self\n</code></pre>"},{"location":"api_reference/#tabpfn.scripts.transformer_prediction_interface.TabPFNClassifier.predict","title":"predict","text":"<pre><code>predict(X, return_winning_probability=False, normalize_with_test=False)\n</code></pre> Source code in <code>src/tabpfn/scripts/transformer_prediction_interface.py</code> <pre><code>def predict(self, X, return_winning_probability=False, normalize_with_test=False):\n    p = self.predict_proba(X, normalize_with_test=normalize_with_test)\n    y = np.argmax(p, axis=-1)\n    y = self.classes_.take(np.asarray(y, dtype=np.intp))\n    if return_winning_probability:\n        return y, p.max(axis=-1)\n    return y\n</code></pre>"},{"location":"api_reference/#tabpfn.scripts.transformer_prediction_interface.TabPFNClassifier.predict_proba","title":"predict_proba","text":"<pre><code>predict_proba(X, normalize_with_test=False)\n</code></pre> Source code in <code>src/tabpfn/scripts/transformer_prediction_interface.py</code> <pre><code>def predict_proba(self, X, normalize_with_test=False):\n    # Check is fit had been called\n    check_is_fitted(self)\n\n    # Input validation\n    X = check_array(X, force_all_finite=False)\n    X_full = np.concatenate([self.X_, X], axis=0)\n    X_full = torch.tensor(X_full, device=self.device).float().unsqueeze(1)\n    y_full = np.concatenate([self.y_, np.zeros_like(X[:, 0])], axis=0)\n    y_full = torch.tensor(y_full, device=self.device).float().unsqueeze(1)\n\n    eval_pos = self.X_.shape[0]\n\n    prediction = transformer_predict(self.model[2], X_full, y_full, eval_pos,\n                                     device=self.device,\n                                     style=self.style,\n                                     inference_mode=True,\n                                     preprocess_transform='none' if self.no_preprocess_mode else 'mix',\n                                     normalize_with_test=normalize_with_test,\n                                     N_ensemble_configurations=self.N_ensemble_configurations,\n                                     softmax_temperature=self.temperature,\n                                     combine_preprocessing=self.combine_preprocessing,\n                                     multiclass_decoder=self.multiclass_decoder,\n                                     feature_shift_decoder=self.feature_shift_decoder,\n                                     differentiable_hps_as_style=self.differentiable_hps_as_style\n                                     , **get_params_from_config(self.c))\n    prediction_, y_ = prediction.squeeze(0), y_full.squeeze(1).long()[eval_pos:]\n\n    return prediction_.detach().cpu().numpy()\n</code></pre>"},{"location":"classification/","title":"Classification","text":"<p>TabPFN provides a powerful interface for handling classification tasks on tabular data. The <code>TabPFNClassifier</code> class can be used for binary and multi-class classification problems.</p>"},{"location":"classification/#example","title":"Example","text":"<p>Below is an example of how to use <code>TabPFNClassifier</code> for a multi-class classification task:</p> <pre><code>from tabpfn import TabPFNClassifier\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# Load the Iris dataset\nX, y = load_iris(return_X_y=True)\n\n# Split data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Initialize and train classifier\nclassifier = TabPFNClassifier(device='cuda', N_ensemble_configurations=10)\nclassifier.fit(X_train, y_train)\n\n# Evaluate\ny_pred = classifier.predict(X_test)\nprint('Test Accuracy:', accuracy_score(y_test, y_pred))\n</code></pre>"},{"location":"getting_started/","title":"Installation","text":"<p>To install TabPFN, you can simply use pip. The basic installation is suitable for most users who are interested in applying TabPFN models to their tabular data.</p> <pre><code>pip install tabpfn\nFor users interested in a more comprehensive setup, including the ability to train models, evaluate them as done in our paper, and use baselines, the full installation is recommended:\n</code></pre> <pre><code>pip install tabpfn[full]\n</code></pre> <p>Note: To use AutoGluon and Auto-sklearn baselines, please create separate environments and install autosklearn==0.14.5 and autogluon==0.4.0 respectively. Installing them in the same environment as TabPFN may not be possible due to dependency conflicts.</p>"},{"location":"getting_started/#example","title":"Example","text":"<p>A simple way to get started with TabPFN using our sklearn interface is demonstrated below. This example shows how to train a classifier on the breast cancer dataset and evaluate its accuracy.</p> <pre><code>from sklearn.metrics import accuracy_score\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.model_selection import train_test_split\n\nfrom tabpfn import TabPFNClassifier\n\n# Load data\nX, y = load_breast_cancer(return_X_y=True)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)\n\n# Initialize classifier\nclassifier = TabPFNClassifier(device='cpu', N_ensemble_configurations=32)\n\n# Train classifier\nclassifier.fit(X_train, y_train)\n\n# Predict and evaluate\ny_pred = classifier.predict(X_test)\nprint('Accuracy:', accuracy_score(y_test, y_pred))\n</code></pre> <p>This example demonstrates the basic workflow of training and predicting with TabPFN models. For more advanced usage, including handling of categorical data, please refer to the Advanced Usage section.</p>"},{"location":"regression/","title":"Regression","text":"<p>TabPFN can also be applied to regression tasks using the <code>TabPFNRegressor</code> class. This allows for predictive modeling of continuous outcomes.</p>"},{"location":"regression/#example","title":"Example","text":"<p>An example usage of <code>TabPFNRegressor</code> is shown below:</p> <pre><code>from tabpfn import TabPFNRegressor\nfrom sklearn.datasets import load_boston\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n\n# Load Boston housing dataset\nX, y = load_boston(return_X_y=True)\n\n# Split data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Initialize and train regressor\nregressor = TabPFNRegressor(device='cuda', N_ensemble_configurations=10)\nregressor.fit(X_train, y_train)\n\n# Predict and evaluate\ny_pred = regressor.predict(X_test)\nprint('Test RMSE:', mean_squared_error(y_test, y_pred, squared=False))\n</code></pre> <p>This example demonstrates how to train and evaluate a regression model. For more details on TabPFNRegressor and its parameters, refer to the API Reference section.</p>"},{"location":"release_notes/","title":"Release notes","text":"<pre><code># Changelog\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [1.0.0] - 2017-06-20\n</code></pre>"}]}